Additional clarification for A3
Below are the only points which we feel we are required to clarify at this point. Rest all the points, We have observed are from standard MESI protocol concepts and We would advise read the protocol from the book , classify them into cases , and then proceed. If any additional clarifications required, We have been managing Piazza actively and answering it regulary. 

Only one active bus transaction can happen at any time, including memory
fetches, cache-to-cache transfers, and invalidates. Local Cache hit 1 cycles,
if its miss the request gets placed on bus, now it is advised invalidation/
RDx/WRx all takes additional 1 cycles for checking neighbor Caches and
if its hit and data transfer required then that would be additional  2xN cycles, as
stated before. if you are doing invalidation/RDx/WRX also in same cycle
as the miss happened at local cache, that is also fine.
Execution cycles count cycles spent executing its own instruction traces,
and idle cycles are cycles spent waiting for the resources while other cores
are executing its instructions.
 Once a core finishes executing all its instructions, it is considered done.
Further cycles are not counted under idle cycles for that core.
All the transactions, sent on bus, by cores will be picked arbitrarily in
round-robin fashion. If you have implemented other way lower core number as priority that would work as well. We will check as per your assumptions
We are re-opening the second submission window. Here is what you should know if you are planning on second submission.

Whatever assunmptions you took for cycles will work for us. We would be checking relative trends and not the exact number for the cycles count.
Whatever assumptions you took for Bus-arbitration policy will work for us. Our test cases adhere with both the implementation options , lowest core or round-robin.
Bus transactions means no of request (such as BusRdmiss, BusWrmiss, BusInv ) sent to bus , not the the number of  data transactions , as that we are already checking via Bus traffic. ( This is the only part where if you assumed otherwise , then can make code change amd resubmit else point 1 and 2 are just for assurance.   
assignment3
good note 0
Updated 2 days ago by ABHISHEK KUMAR
followup discussionsfor lingering questions and comments

Resolved

Unresolved
@58_f1
Rajat Soni 1 week ago
It is very difficult to change our assumptions to match with these clarifications, that are being released at the date of deadline, we also have a major tommorow, kindly consider different assumption to true also.
helpful! 5
Anonymous Poet 1 week ago
true, we are not doing round robin, we are doing what was clarified before, itne kam time me nahi ho sakte changes.
helpful! 1
ABHISHEK KUMAR 1 week ago
Well  nothing new is added. it is just clarificatin.

point 2 and point 3 , is not even assmuption, it was intuitive. I just added for clarity. 

point1 again I have said both will work, whatever ways you took it. 

point 4 is the only thing which was actually required and that also if you have Implemeted then it should not be an issue. it is arbitration polciy so in code it can be changed if you wrote in modular policy and even if you wrote differntly then also it would work, just state you assumptions of design decision clealy. 

good comment 0
Rajat Soni 1 week ago
Nothing is intuitive about points 2 and 3, as it was nowhere mentioned that everyone counted cycles according to the logic they thought was best. It is your intuition to count it like that and it can be different from others.
helpful! 4


Resolved

Unresolved
@58_f2
Anonymous Gear 1 week ago
All the transactions, sent on bus, by cores will be picked arbitrarily in
round-robin fashion....this assumption was just sent in yesterday...before that it was tejas's assumption that if multiple cores issue request in same cycle then lower id or else whoever issues request first will get it...we cannot change the code so quickly...round-robin was not mentioned anywhere for the majoritiy of the duration of the assignment
helpful! 2
ABHISHEK KUMAR 1 week ago
I have edited. do not worry. We will check on your assumptions, on that as well

Additional clarification for A3
Below are the only points which we feel we are required to clarify at this point. Rest all the points, We have observed are from standard MESI protocol concepts and We would advise read the protocol from the book , classify them into cases , and then proceed. If any additional clarifications required, We have been managing Piazza actively and answering it regulary. 

Only one active bus transaction can happen at any time, including memory
fetches, cache-to-cache transfers, and invalidates. Local Cache hit 1 cycles,
if its miss the request gets placed on bus, now it is advised invalidation/
RDx/WRx all takes additional 1 cycles for checking neighbor Caches and
if its hit and data transfer required then that would be additional  2xN cycles, as
stated before. if you are doing invalidation/RDx/WRX also in same cycle
as the miss happened at local cache, that is also fine.
Execution cycles count cycles spent executing its own instruction traces,
and idle cycles are cycles spent waiting for the resources while other cores
are executing its instructions.
 Once a core finishes executing all its instructions, it is considered done.
Further cycles are not counted under idle cycles for that core.
All the transactions, sent on bus, by cores will be picked arbitrarily in
round-robin fashion. If you have implemented other way lower core number as priority that would work as well. We will check as per your assumptions
We are re-opening the second submission window. Here is what you should know if you are planning on second submission.

Whatever assunmptions you took for cycles will work for us. We would be checking relative trends and not the exact number for the cycles count.
Whatever assumptions you took for Bus-arbitration policy will work for us. Our test cases adhere with both the implementation options , lowest core or round-robin.
Bus transactions means no of request (such as BusRdmiss, BusWrmiss, BusInv ) sent to bus , not the the number of  data transactions , as that we are already checking via Bus traffic. ( This is the only part where if you assumed otherwise , then can make code change amd resubmit else point 1 and 2 are just for assurance.   
assignment3
good note 0
Updated 2 days ago by ABHISHEK KUMAR
followup discussionsfor lingering questions and comments

Resolved

Unresolved
@58_f1
Rajat Soni 1 week ago
It is very difficult to change our assumptions to match with these clarifications, that are being released at the date of deadline, we also have a major tommorow, kindly consider different assumption to true also.
helpful! 5
Anonymous Poet 1 week ago
true, we are not doing round robin, we are doing what was clarified before, itne kam time me nahi ho sakte changes.
helpful! 1
ABHISHEK KUMAR 1 week ago
Well  nothing new is added. it is just clarificatin.

point 2 and point 3 , is not even assmuption, it was intuitive. I just added for clarity. 

point1 again I have said both will work, whatever ways you took it. 

point 4 is the only thing which was actually required and that also if you have Implemeted then it should not be an issue. it is arbitration polciy so in code it can be changed if you wrote in modular policy and even if you wrote differntly then also it would work, just state you assumptions of design decision clealy. 

good comment 0
Rajat Soni 1 week ago
Nothing is intuitive about points 2 and 3, as it was nowhere mentioned that everyone counted cycles according to the logic they thought was best. It is your intuition to count it like that and it can be different from others.
helpful! 4


Resolved

Unresolved
@58_f2
Anonymous Gear 1 week ago
All the transactions, sent on bus, by cores will be picked arbitrarily in
round-robin fashion....this assumption was just sent in yesterday...before that it was tejas's assumption that if multiple cores issue request in same cycle then lower id or else whoever issues request first will get it...we cannot change the code so quickly...round-robin was not mentioned anywhere for the majoritiy of the duration of the assignment
helpful! 2
ABHISHEK KUMAR 1 week ago
I have edited. do not worry. We will check on your assumptions, on that as well